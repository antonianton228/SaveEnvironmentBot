import os
import ydb
import json
import binascii
import telebot
import requests
from telebot import types
from telebot.types import InputMediaPhoto
from geopy.geocoders import Nominatim

geolocator = Nominatim(timeout=10, user_agent = "myGeolocator")
driver = ydb.Driver(database='/ru-central1/b1gu0fk83o7tkm6us2l3/etnbifd536hjt2dsdvdg', endpoint ='grpcs://ydb.serverless.yandexcloud.net:2135', credentials=ydb.iam.MetadataUrlCredentials())

driver.wait(fail_fast=True, timeout=5)
pool = ydb.SessionPool(driver)
bot = telebot.TeleBot("5318941676:AAE65AOZ11ylYJJmajr1PoJ2yM41xMpTVLo", parse_mode=None)
id = ''
cat = ''
barcode = ''
loc = []
catsss = ["–í—Å–µ —Ç–∏–ø—ã ‚ôª", "–ë—É–º–∞–≥–∞üìÑ", "–°—Ç–µ–∫–ª–æüçæ", "–ü–ª–∞—Å—Ç–∏–∫ü´ô", "–ú–µ—Ç–∞–ª–ªüé∏", "–û–¥–µ–∂–¥–∞üëï", "–ò–Ω–æ–µüèÅ", "–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã‚ò†", "–ë–∞—Ç–∞—Ä–µ–π–∫–∏üîã", "–õ–∞–º–ø–æ—á–∫–∏üí°", "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞üîå", "–¢–µ—Ç—Ä–∞–ü–∞–∫üßÉ",
"–ö—Ä—ã—à–µ—á–∫–∏üî¥", "–®–∏–Ω—ãüõû"]

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn00 = types.KeyboardButton("üó∫Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüó∫Ô∏è", request_location=True)
btn0 = types.KeyboardButton("–í—Å–µ —Ç–∏–ø—ã ‚ôª")
btn1 = types.KeyboardButton("–ë—É–º–∞–≥–∞üìÑ")
btn2 = types.KeyboardButton("–°—Ç–µ–∫–ª–æüçæ")
btn3 = types.KeyboardButton("–ü–ª–∞—Å—Ç–∏–∫ü´ô")
btn4 = types.KeyboardButton("–ú–µ—Ç–∞–ª–ªüé∏")
btn5 = types.KeyboardButton("–û–¥–µ–∂–¥–∞üëï")
btn6 = types.KeyboardButton("–ò–Ω–æ–µüèÅ")
btn7 = types.KeyboardButton("–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã‚ò†")
btn8 = types.KeyboardButton("–ë–∞—Ç–∞—Ä–µ–π–∫–∏üîã")
btn9 = types.KeyboardButton("–õ–∞–º–ø–æ—á–∫–∏üí°")
btn10 = types.KeyboardButton("–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞üîå")
btn11 = types.KeyboardButton("–¢–µ—Ç—Ä–∞–ü–∞–∫üßÉ")
btn12 = types.KeyboardButton("–ö—Ä—ã—à–µ—á–∫–∏üî¥")
btn13 = types.KeyboardButton("–®–∏–Ω—ãüõû")
btn14 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –∫—É–¥–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å‚ùìÔ∏è')
btn15 = types.KeyboardButton("–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –±–æ—Ç—É?üÜò")
btn16 = types.KeyboardButton("–£–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìà")
btn17 = types.KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µüíñ")
btn19 = types.KeyboardButton("‚¨á–°–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é‚¨á")
btn20 = types.KeyboardButton("‚ôª–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç‚ôª")
btn21 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤üë§")
btn18 = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤üôå")
btn22 = types.KeyboardButton("–ö–∞–∫–æ–π –º—É—Å–æ—Ä –º–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?üíå")
btn23 = types.KeyboardButton("–ó–∞—á–µ–º –Ω—É–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ö–æ–¥—ã?üöÆ")
markup.add(btn00)
markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13)
markup.add(btn20)
markup.add(btn14, btn21)
markup.add(btn16, btn17)
markup.add(btn15)
markup.add(btn23)
markup.add(btn18)

def get_nickname(session, id):
    nick = session.transaction().execute(
        f'''SELECT nickname FROM stats_pols
        WHERE TGid = "{id}"''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['nickname'].decode("utf-8")
    return nick




def add_like(session, data):
    currlike = session.transaction().execute(
        f'''SELECT liked_rec FROM stats_pols
        WHERE TGid = "{data[1]}"''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['liked_rec'].decode("utf-8")

    session.transaction().execute(
            f'''
            UPDATE stats_pols
            SET liked_rec = "{currlike + '-' + '+'.join([data[2], data[3]])}"
            WHERE TGid = "{data[1]}";
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    session.transaction().execute(
            f'''
            UPDATE all_recs
            SET times_like = times_like + 1
            WHERE lat = {data[2]} and lon = {data[3]};
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    bot.send_message(data[1], f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø—É–Ω–∫—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")



def delete_like(session, data):
    currlike = session.transaction().execute(
        f'''SELECT liked_rec FROM stats_pols
        WHERE TGid = "{data[1]}"''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['liked_rec'].decode("utf-8")
    currlike = currlike.split('-')
    for i in currlike:
        if data[2] in i.split('+') and data[3] in i.split('+'):
            currlike.remove(i)
            break
    currlike = '-'.join(currlike)
    
    session.transaction().execute(
            f'''
            UPDATE stats_pols
            SET liked_rec = "{currlike}"
            WHERE TGid = "{data[1]}";
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    bot.send_message(data[1], f"–í—ã —É–¥–∞–ª–∏–ª–∏ –ø—É–Ω–∫—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ‚ùå")
    

def send_liked(session):
    global id
    liked = session.transaction().execute(
        f'''
        SELECT liked_rec FROM stats_pols
        WHERE TGid = "{id}";
        ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['liked_rec']
    f = []

    for i in liked.decode('utf-8').split('-'):
        if i != '':
            f.append(session.transaction().execute(
                f'''
                SELECT * from all_recs WHERE 
                lat = {i.split('+')[0]} and lon = {i.split('+')[1]}''',
                commit_tx=True,
                settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0])

    if len(f) != 0:
        bot.send_message(id, f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –ø—É–Ω–∫—Ç—ãüíõ")
    for i in f:
        tipe = []
        for j in i['cats'].split('='):
            if j != '':
                tipe.append(catsss[int(j)])
        locate = f"{i['lat']};{i['lon']}"
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        callback_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æüóëÔ∏è", callback_data=f"delete;{id};{locate}")
        callback_button1 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚úçüèª", callback_data=f"comment1;{id};{locate}")
        callback_button2 = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üìã", callback_data=f"comment2;{id};{locate}")
        keyboard.add(callback_button, callback_button1, callback_button2)


        bot.send_message(id, f'''–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–µ–º–∞: {binascii.unhexlify(i['name']).decode()}
–¢–∏–ø –ø—É–Ω–∫—Ç–∞ —Å–±–æ—Ä–∞: *{', '.join(sorted(tipe))}*''', parse_mode='Markdown')
        bot.send_location(id, *tuple((float(i['lat']), float(i['lon']))), reply_markup=keyboard)
    if len(f) != 0:
        bot.send_message(id, f"–≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º—É—Å–æ—Ä–∞.üíñ")
    else:
        bot.send_message(id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø—É–Ω–∫—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –ø–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º.üíñ')
        

def get_cat(session):
    global id, cat
    cat = session.transaction().execute(
        f'''SELECT cat FROM cats
        WHERE TGid = "{id}";''',
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['cat'].decode("utf-8")

def add_stat(session, id, result):
    global cat
    session.transaction().execute(
        f'''UPDATE stats_pols
        SET list_of_types = "{catsss[int(cat)]}", times_get = times_get + 1
        WHERE TGid = "{id}";''',
        commit_tx=True,
    )
    session.transaction().execute(
        f'''UPDATE all_recs
        SET times_find = times_find + 1
        WHERE id = {result[0]['id']} or id = {result[1]['id']} or id = {result[2]['id']};''',
        commit_tx=True,
    )


def change_curr_pos(session, newPos):
    global id, cat
    session.transaction().execute(
        f'''UPDATE cats
        SET pos = "{newPos}"
        WHERE TGid = "{id}";''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )

def execute_query(session):
    global id, cat
    session.transaction().execute(
    f'''
    UPDATE cats
    SET cat = "{cat}"
    WHERE TGid = "{id}";''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )



def change_bar(session):
    global id, cat, barcode
    a = session.transaction().execute(
        f'''SELECT cat FROM tovars
        WHERE bar = "{barcode}";''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows
    if a:
        bot.send_message(id, f"–≠—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å –≤ {catsss[int(a[0]['cat'])]} \n–ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ ")
        session.transaction().execute(
                f'''
                UPDATE cats
                SET pos = "0"
                WHERE TGid = "{id}";
            ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{id}")
        keyboard.add(callback_button)
        bot.send_message(id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ç–æ–≤–∞—Ä. –ü—Ä–æ—Å–∏–º –Ω–∞–º –ø–æ–º–æ—á—å. –í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø –º—É—Å–æ—Ä–∞ –¥–ª—è {barcode}", reply_markup=keyboard)
        

        session.transaction().execute(
        f'''
        UPDATE cats
        SET currBar = "{barcode}"
        WHERE TGid = "{id}"
    ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
        )
        session.transaction().execute(
        f'''
        UPDATE cats
        SET pos = "2"
        WHERE TGid = "{id}";
    ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
        )


    
def send_stats(session):
    f = session.transaction().execute(
        f'''SELECT times_get, times_sort, list_of_types FROM stats_pols
        WHERE TGid = "{id}";''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]
    a = f['list_of_types']
    bot.send_message(id, f"""–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {f['times_get']}
–ò–∑ –Ω–∏—Ö –≤—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç—Ö–æ–¥—ã {f['times_sort']}
–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–ø: {a.decode('utf-8')}""")

    

def get_pos(session):
    return session.transaction().execute(
        f'''SELECT pos FROM cats
        WHERE TGid = "{id}";''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['pos'].decode("utf-8")


def new_pols(session):
    global id, cat
    
    # Create the transaction and execute query.
    f = list(map(lambda x: x['TGid'].decode("utf-8"), session.transaction().execute(
        'SELECT TGid FROM cats;',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows))


    if str(id) not in f:
        maxId = session.transaction().execute(
        'SELECT max(id) FROM cats;',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['column0']
        session.transaction().execute(
        f'''
        INSERT INTO cats(id, TGid, cat, currBar, pos) VALUES({maxId + 1},"{id}","{0}", "0", "0");''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
      )




    f = list(map(lambda x: x['TGid'].decode("utf-8"), session.transaction().execute(
        'SELECT TGid FROM stats_pols;',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows))


    if str(id) not in f:
        maxId = session.transaction().execute(
        'SELECT max(id) FROM stats_pols;',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows[0]['column0']
        session.transaction().execute(
        f'''
        INSERT INTO stats_pols(id, TGid, liked_rec, list_of_rec, list_of_types, times_get, times_sort, nickname) VALUES({maxId + 1},"{id}","", "", "0", 1, 0, "-");''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
      )




def newcat(session):
    maxId = int(max(session.transaction().execute(
        'SELECT id FROM tovars;',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
    )[0].rows, key=lambda x: int(x['id']))['id'])



    barcode = session.transaction().execute(
        f'''SELECT currBar FROM cats
        WHERE TGid = "{id}";''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['currBar'].decode("utf-8")
    if cat in catsss:

        session.transaction().execute(
            f'''
            INSERT INTO tovars(id, TGid, bar, cat) VALUES("{maxId + 1}","{id}","{barcode}", "{catsss.index(cat)}");''',
            commit_tx=True,
            settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
        )


    session.transaction().execute(
                f'''
                UPDATE cats
                SET pos = "0"
                WHERE TGid = "{id}";
            ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    bot.send_message(id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é")


def add_sorted(session, data):
    session.transaction().execute(
            f'''
            UPDATE stats_pols
            SET times_sort = times_sort + 1
            WHERE TGid = "{data[1]}";
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))

    session.transaction().execute(
            f'''
            UPDATE all_recs
            SET times_sort = times_sort + 1
            WHERE lat = {data[2]} and lon = {data[3]};
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    bot.send_message(data[1], f"‚ôªÔ∏è‚ù§Ô∏è–ö—Ä—É—Ç–æ, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ –æ—Ç—Ö–æ–¥—ã)‚ù§Ô∏è‚ôªÔ∏è")

def add_comment(session, text):
    global id
    data = session.transaction().execute(
    f'''SELECT currBar FROM cats
    WHERE TGid = "{id}";''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['currBar'].decode("utf-8").split(';')

    curr_com = session.transaction().execute(
    f'''SELECT comments FROM all_recs
    WHERE lat = {data[2]} and lon = {data[3]};''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['comments']
    if str(id) in curr_com:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        callback_button = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üìë", callback_data=f"comment2;{data[1]};{data[2]};{data[3]}")
        callback_button1 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–πüñçÔ∏è", callback_data=f"edit;{data[1]};{data[2]};{data[3]}")
        callback_button2 = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{data[1]}")

        keyboard.add(callback_button, callback_button1, callback_button2)
        bot.send_message(data[1], f"–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π", reply_markup=keyboard)
        return
    
    curr_com = curr_com + '||' + text + '___' + f"{data[1]}"

    session.transaction().execute(
            f'''
            UPDATE all_recs
            SET comments = "{curr_com}"
            WHERE lat = {data[2]} and lon = {data[3]};;
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))
    pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))
    bot.send_message(id, "–¢–µ–ø–µ—Ä—å –≤–∞—à –æ—Ç–∑—ã–≤ –º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏üóØÔ∏è")
    

def save_data(session, data):
    session.transaction().execute(
        f'''
        UPDATE cats
        SET currBar = "{data}"
        WHERE TGid = "{data.split(';')[1]}"
    ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2)
        )

def read_comments(session, data):

    bot.send_message(data[1], f"""–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üì®""")

    curr_com = session.transaction().execute(
    f'''SELECT comments FROM all_recs
    WHERE lat = {data[2]} and  lon = {data[3]};''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['comments'].split('||')

    

    for i in curr_com:
        if i != '' and i != '-':

            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if i.split('___')[1] == data[1]:
                callback_button = types.InlineKeyboardButton(text="üñçÔ∏è–ò–∑–º–µ–Ω–∏—Ç—åüñçÔ∏è", callback_data=f"edit;{';'.join(data[1:])}")
                callback_button1 = types.InlineKeyboardButton(text="üóëÔ∏è–£–¥–∞–ª–∏—Ç—åüóëÔ∏è", callback_data=f"delete_com;{';'.join(data[1:])}")
                keyboard.add(callback_button, callback_button1)
                nick = session.transaction().execute(
                f'''SELECT nickname FROM stats_pols
                WHERE TGid = "{i.split('___')[1]}"''',
                commit_tx=True,
                settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['nickname'].decode('utf-8')
                bot.send_message(data[1], f"""üó£Ô∏è*{binascii.unhexlify(nick).decode()}(–í—ã)*:
{i.split('___')[0]}""", parse_mode='Markdown', reply_markup=keyboard)

            else:
                

                nick = session.transaction().execute(
                    f'''SELECT nickname FROM stats_pols
                    WHERE TGid = "{i.split('___')[1]}"''',
                    commit_tx=True,
                    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['nickname'].decode('utf-8')


                bot.send_message(data[1], f"""üó£Ô∏è*{binascii.unhexlify(nick).decode()}*:
{i.split('___')[0]}""", parse_mode='Markdown')


    keyboard = types.InlineKeyboardMarkup(row_width=2)
    callback_button2 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚úçüèª", callback_data=f"comment1;{';'.join(data[1:])}")
    keyboard.add(callback_button2)
    bot.send_message(data[1], f"–≠—Ç–æ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–∏—Ç—å —Å–≤–æ–π!", reply_markup=keyboard)
    pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))

def delete_comm(session, data):
    curr_com = session.transaction().execute(
    f'''SELECT comments FROM all_recs
    WHERE lat = {data[2]} and  lon = {data[3]};''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['comments'].split('||')
    for i in curr_com:
        if data[1] in i:
            curr_com.remove(i)
            break
    
    curr_com = '||'.join(curr_com)
    session.transaction().execute(
            f'''
            UPDATE all_recs
            SET comments = "{curr_com}"
            WHERE lat = {data[2]} and lon = {data[3]};;
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))

def send_fact(session, id):
    fact = session.transaction().execute(
    f'''SELECT fact, RandomNumber(fact) as r FROM facts
order by r
limit 1''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['fact']
    bot.send_message(id, fact + "‚ôªÔ∏è")

def edit_comm(session, id, text):
    data = session.transaction().execute(
    f'''SELECT currBar FROM cats
    WHERE TGid = "{id}"''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['currBar'].decode('utf-8').split(';')

    curr_com = session.transaction().execute(
    f'''SELECT comments FROM all_recs
    WHERE lat = {data[2]} and  lon = {data[3]};''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))[0].rows[0]['comments'].split('||')

    for i in range(len(curr_com)):
        if str(id) in curr_com[i]:
            curr_com[i] = text + '___' + str(id)
    
    curr_com = '||'.join(curr_com)

    session.transaction().execute(
            f'''
            UPDATE all_recs
            SET comments = "{curr_com}"
            WHERE lat = {data[2]} and lon = {data[3]};;
        ''',
    commit_tx=True,
    settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))

    bot.send_message(data[1], f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑–º–µ–Ω—ë–Ωüìö")



def handler(event, context):
    global id, cat, barcode, markup
    
    if 'callback_query' in json.loads(event['body']):
        body = json.loads(event['body'])
        data = body['callback_query']['data'].split(';')
        if data[0] == 'back':
            pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))
            bot.send_message(data[1], f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.‚úÖ")
        if data[0] == 'location':
            ins1 = requests.get('https://storage.yandexcloud.net/env-backet/Bot1.jpg').content
            ins2 = requests.get('https://storage.yandexcloud.net/env-backet/bot2.jpg').content
            ins3 = requests.get('https://storage.yandexcloud.net/env-backet/bot3.jpg').content

            media_group = []
            a = "üåé–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.\n\n–õ–∏–±–æ –Ω–∞–∂–∞—Ç—å —Å–∫—Ä–µ–ø–∫—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±—Ä–∞—Ç—å *Location* –∏ –Ω–∞–∂–∞—Ç—å *Send My Current Location*üåé"
            media_group.append(InputMediaPhoto(ins1, caption = a, parse_mode='Markdown'))
            media_group.append(InputMediaPhoto(ins2, caption = ''))
            media_group.append(InputMediaPhoto(ins3, caption = ''))
            bot.send_media_group(data[1], media_group)

        if data[0] == 'like':
            pool.retry_operation_sync(lambda x: add_like(x, data))
            
        if data[0] == 'edit':
            pool.retry_operation_sync(lambda x: change_curr_pos(x, 9))
            bot.send_message(data[1], f"–ù–∞–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.‚úçÔ∏è")
            pool.retry_operation_sync(lambda x: save_data(x, body['callback_query']['data']))
        if data[0] == 'delete_com':
            pool.retry_operation_sync(lambda x: delete_comm(x, data))
            bot.send_message(data[1], "üí•–í—ã —É–¥–∞–ª–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!üí•")


        if data[0] == 'delete':
            pool.retry_operation_sync(lambda x: delete_like(x, data))
        if data[0] == 'sort':
            pool.retry_operation_sync(lambda x: add_sorted(x, data))
        if data[0] == 'comment1':
            nick = pool.retry_operation_sync(lambda x: get_nickname(x, data[1]))
            if  nick != '-':
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{data[1]}")
                keyboard.add(callback_button)

                pool.retry_operation_sync(lambda x: change_curr_pos(x, 5))
                pool.retry_operation_sync(lambda x: save_data(x, body['callback_query']['data']))
                bot.send_message(data[1], f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–∑—ã–≤ –ø—Ä–æ –ø—É–Ω–∫—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.üó£Ô∏è", reply_markup=keyboard)
            else:
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{id}")
                keyboard.add(callback_button)
                bot.send_message(data[1], f"–ü–æ–∂–∞–ª–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=keyboard)
                pool.retry_operation_sync(lambda x: change_curr_pos(x, 8))
                pool.retry_operation_sync(lambda x: save_data(x, body['callback_query']['data']))
        if data[0] == 'comment2':
            pool.retry_operation_sync(lambda x: read_comments(x, data))
        if data[0] == 'text_loc':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{data[1]}")
            keyboard.add(callback_button)
            pool.retry_operation_sync(lambda x: change_curr_pos(x, 6))
            bot.send_message(data[1], f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.üóíÔ∏è\n–ë–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –ú–∞–ª–∞—è –°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è 15", reply_markup=keyboard)

        
    elif 'message' in  json.loads(event['body']):
        body = json.loads(event['body'])
        id = body['message']['chat']['id']
        pool.retry_operation_sync(new_pols)
        if pool.retry_operation_sync(get_pos) == '0':
            if 'location' in body['message'].keys():
                finder(body)
            
            elif 'text' in body['message'].keys():
                id = str(body['message']['chat']['id'])
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                callback_button = types.InlineKeyboardButton(text="üÜò–£–∑–Ω–∞—Ç—å, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüÜò", callback_data=f"location;{body['message']['chat']['id']}")
                callback_button1 = types.InlineKeyboardButton(text="ü™∂–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–ºü™∂", callback_data=f"text_loc;{body['message']['chat']['id']}")
                keyboard.add(callback_button, callback_button1)
                if body['message']['text'] == '/start':
                    pool.retry_operation_sync(new_pols)

                    bot.send_message(body['message']['chat']['id'], '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 

–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ó–µ–º–ª—é –≤ —á–∏—Å—Ç–æ—Ç–µ. üå±‚ôªÔ∏è

–Ø –ø–æ–¥—Å–∫–∞–∂—É –≤–∞–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–π –ø—É–Ω–∫—Ç –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –æ—Ç—Ö–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫ –º—É—Å–æ—Ä–∞. 

–ê —Ç–∞–∫ –∂–µ –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: https://env-site.website.yandexcloud.net

–ï—Å–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –æ—à–∏–±–∫–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @AntonIvanov1111 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.''',
                                    reply_markup=markup)
                elif '–í—Å–µ —Ç–∏–ø—ã' in body['message']['text']:
                    cat = '0'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤‚ôª", reply_markup=keyboard)
                elif '–ë—É–º–∞–≥–∞' in body['message']['text']:
                    cat = '1'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –±—É–º–∞–≥–∏üìÑ", reply_markup=keyboard)
                elif '–°—Ç–µ–∫–ª–æ' in body['message']['text']:
                    cat = '2'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç–µ–∫–ª–∞üçæ", reply_markup=keyboard)
                elif '–ü–ª–∞—Å—Ç–∏–∫' in body['message']['text']:
                    cat = '3'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞ü´ô", reply_markup=keyboard)
                elif '–ú–µ—Ç–∞–ª–ª' in body['message']['text']:
                    cat = '4'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–µ—Ç–∞–ª–ª–∞üé∏", reply_markup=keyboard)
                elif '–û–¥–µ–∂–¥–∞' in body['message']['text']:
                    cat = '5'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–¥–µ–∂–¥—ãüëï", reply_markup=keyboard)
                elif '–ò–Ω–æ–µ' in body['message']['text']:
                    cat = '6'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–Ω–æ–≥–æüèÅ", reply_markup=keyboard)
                elif '–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã' in body['message']['text']:
                    cat = '7'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤‚ò†", reply_markup=keyboard)
                elif '–ë–∞—Ç–∞—Ä–µ–π–∫–∏' in body['message']['text']:
                    cat = '8'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –±–∞—Ç–∞—Ä–µ–µ–∫üîã", reply_markup=keyboard)
                elif '–õ–∞–º–ø–æ—á–∫–∏' in body['message']['text']:
                    cat = '9'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ª–∞–º–ø–æ—á–µ–∫üí°", reply_markup=keyboard)
                elif '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞' in body['message']['text']:
                    cat = '10'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏üîå", reply_markup=keyboard)
                elif '–¢–µ—Ç—Ä–∞–ü–∞–∫' in body['message']['text']:
                    cat = '11'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Ç—Ä–∞ –ø–∞–∫–∞üßÉ", reply_markup=keyboard)
                elif '–ö—Ä—ã—à–µ—á–∫–∏' in body['message']['text']:
                    cat = '12'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫—Ä—ã—à–µ—á–µ–∫üî¥", reply_markup=keyboard)
                elif '–®–∏–Ω—ã' in body['message']['text']:
                    cat = '13'
                    pool.retry_operation_sync(execute_query)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —à–∏–Ωüõû", reply_markup=keyboard)
                elif '–£–∑–Ω–∞—Ç—å –∫—É–¥–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å' in body['message']['text']:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{body['message']['chat']['id']}")
                    keyboard.add(callback_button)
                    bot.send_message(body['message']['chat']['id'],
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä —Å ‚ñå‚îÇ‚ñà‚ïë‚ñå‚ïë‚ñå‚ïë —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ ‚ñå‚îÇ‚ñà‚ïë‚ñå‚ïë‚ñå‚ïë —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞: @QRVisorBot)", reply_markup=keyboard)
                    
                    pool.retry_operation_sync(lambda x: change_curr_pos(x, 1))

                elif '–£–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' in body['message']['text']:
                    pool.retry_operation_sync(send_stats)
                elif '–°–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é' in body['message']['text']:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn0 = types.KeyboardButton("‚ôªÔ∏è–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é‚ôªÔ∏è")
                    markup.add(btn0)
                    bot.send_message(body['message']['chat']['id'],
                                        '''–ú–µ–Ω—é —É–±—Ä–∞–Ω–æüí´''',  reply_markup=markup) 

                elif '–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –±–æ—Ç—É?' in body['message']['text']:
                    ins1 = requests.get('https://storage.yandexcloud.net/env-backet/instructon-1.jpeg').content
                    ins2 = requests.get('https://storage.yandexcloud.net/env-backet/instruction-2.jpeg').content

                    media_group = []
                    a = "üåé–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å —Å–∫—Ä–µ–ø–∫—É, —Ç–∞–º –≤—ã–±—Ä–∞—Ç—å *Location* –∏ –Ω–∞–∂–∞—Ç—å *Send My Current Location*üåé"
                    media_group.append(InputMediaPhoto(ins1, caption = a, parse_mode='Markdown'))
                    media_group.append(InputMediaPhoto(ins2, caption = ''))
                    bot.send_media_group(body['message']['chat']['id'], media_group)
                
                elif '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' in body['message']['text']:
                    pool.retry_operation_sync(send_liked)
                elif '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç' in body['message']['text']:
                    bot.send_message(body['message']['chat']['id'], f"–°–µ–π—á–∞—Å –ø–æ–∏—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –≤ —Å–≤–æ–µ–π –∫–æ–ø–∏–ª–∫–µüåé")
                    pool.retry_operation_sync(lambda x: send_fact(x, body['message']['chat']['id']))
                elif '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è' in body['message']['text']:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{body['message']['chat']['id']}")
                    keyboard.add(callback_button)
                    bot.send_message(body['message']['chat']['id'], f"–ü–æ–∂–∞–ª–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=keyboard)
                    pool.retry_operation_sync(lambda x: change_curr_pos(x, 10))
                elif '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤' in body['message']['text']:
                    bot.send_message(body['message']['chat']['id'],
                                    "–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞–º–∏ –∏ –Ω–µ –∏–º–µ–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∏–∫–∞–∫–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π. –ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ.\n –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.donationalerts.com/r/mof1us. –ö–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.üòä")
                elif '–ó–∞—á–µ–º –Ω—É–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ö–æ–¥—ã?' in body['message']['text']:
                    ins1 = requests.get('https://storage.yandexcloud.net/env-backet/1.png').content
                    ins2 = requests.get('https://storage.yandexcloud.net/env-backet/2.png').content
                    ins3 = requests.get('https://storage.yandexcloud.net/env-backet/3.png').content

                    media_group = []
                    media_group.append(InputMediaPhoto(ins1, caption = '''–†–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç—Ö–æ–¥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑ –¢–ë–û (–¢–≤–µ—Ä–¥—ã–µ –ë—ã—Ç–æ–≤—ã–µ –û—Ç—Ö–æ–¥—ã) –≤—ã–¥–µ–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≥–æ–¥–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ ‚Äì –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –Ω–∞ –ø–æ–º–æ–π–∫—É ‚Äì —Ä–µ—à–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á:

‚ôªÔ∏è —Å–æ–∫—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ
‚ôªÔ∏è —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞ —Å—á–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—ã—Ä—å—è
‚ôªÔ∏è —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—é —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –º–∏—Ä–µ
‚ôªÔ∏è —É–º–µ–Ω—å—à–∞–µ—Ç –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω—É—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É''', parse_mode='Markdown'))
                    media_group.append(InputMediaPhoto(ins2, caption = ''))
                    media_group.append(InputMediaPhoto(ins3, caption = ''))
                    bot.send_media_group(body['message']['chat']['id'], media_group)
                elif '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é' in body['message']['text']:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn00 = types.KeyboardButton("üó∫Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüó∫Ô∏è", request_location=True)
                    btn0 = types.KeyboardButton("–í—Å–µ —Ç–∏–ø—ã ‚ôª")
                    btn1 = types.KeyboardButton("–ë—É–º–∞–≥–∞üìÑ")
                    btn2 = types.KeyboardButton("–°—Ç–µ–∫–ª–æüçæ")
                    btn3 = types.KeyboardButton("–ü–ª–∞—Å—Ç–∏–∫ü´ô")
                    btn4 = types.KeyboardButton("–ú–µ—Ç–∞–ª–ªüé∏")
                    btn5 = types.KeyboardButton("–û–¥–µ–∂–¥–∞üëï")
                    btn6 = types.KeyboardButton("–ò–Ω–æ–µüèÅ")
                    btn7 = types.KeyboardButton("–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã‚ò†")
                    btn8 = types.KeyboardButton("–ë–∞—Ç–∞—Ä–µ–π–∫–∏üîã")
                    btn9 = types.KeyboardButton("–õ–∞–º–ø–æ—á–∫–∏üí°")
                    btn10 = types.KeyboardButton("–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞üîå")
                    btn11 = types.KeyboardButton("–¢–µ—Ç—Ä–∞–ü–∞–∫üßÉ")
                    btn12 = types.KeyboardButton("–ö—Ä—ã—à–µ—á–∫–∏üî¥")
                    btn13 = types.KeyboardButton("–®–∏–Ω—ãüõû")
                    btn14 = types.KeyboardButton('‚ùìÔ∏è–£–∑–Ω–∞—Ç—å –∫—É–¥–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å‚ùìÔ∏è')
                    btn15 = types.KeyboardButton("–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –±–æ—Ç—É?üÜò")
                    btn16 = types.KeyboardButton("–£–≤–∏–¥–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüìà")
                    btn17 = types.KeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µüíñ")
                    btn19 = types.KeyboardButton("‚¨á–°–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é‚¨á")
                    btn20 = types.KeyboardButton("‚ôª–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç‚ôª")
                    btn21 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤üë§")
                    btn18 = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤üôå")
                    btn22 = types.KeyboardButton("–ö–∞–∫–æ–π –º—É—Å–æ—Ä –º–æ–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?üíå")
                    markup.add(btn00)
                    markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12, btn13)
                    markup.add(btn20)
                    markup.add(btn14, btn21)
                    markup.add(btn16, btn17)
                    markup.add(btn15)
                    markup.add(btn18)
                    bot.send_message(body['message']['chat']['id'], "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É –≤ —á–∏—Å—Ç–æ—Ç–µüíñ",  reply_markup=markup)
                else:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    callback_button = types.InlineKeyboardButton(text="üÜò–£–∑–Ω–∞—Ç—å, –∫–∞–∫üÜò", callback_data=f"location;{body['message']['chat']['id']}")
                    callback_button1 = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–ºü™∂", callback_data=f"text_loc;{body['message']['chat']['id']}")
                    keyboard.add(callback_button, callback_button1)
                    bot.send_message(body['message']['chat']['id'], "üåé–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüåé", reply_markup=keyboard)
        elif pool.retry_operation_sync(get_pos) == '1':
            if 'text' in body['message']:
                barcode = body['message']['text']
                pool.retry_operation_sync(change_bar)
        elif pool.retry_operation_sync(get_pos) == '2':
            if 'text' in body['message']:
                cat = body['message']['text']
                pool.retry_operation_sync(newcat)
        elif pool.retry_operation_sync(get_pos) == '5':
            if 'text' in body['message']:
                pool.retry_operation_sync(lambda x: add_comment(x, body['message']['text']))
                
        elif pool.retry_operation_sync(get_pos) == '6':
            if 'text' in body['message']:
                coords = geolocator.geocode(body['message']['text'])
                if coords:
                    coords = (coords.longitude, coords.latitude)
                    finder(body, is_text=True, coords=coords)
                    pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))
                else:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    callback_button = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîô", callback_data=f"back;{body['message']['chat']['id']}")
                    keyboard.add(callback_button)
                    bot.send_message(body['message']['chat']['id'], "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –∏—â–∏—Ç–µ.‚ùå", reply_markup=keyboard)
        elif pool.retry_operation_sync(get_pos) == '8':
            if 'text' in body['message']:
                pool.retry_operation_sync(lambda x: add_nick(x, body['message']['chat']['id'], body['message']['text']))
                pool.retry_operation_sync(lambda x: change_curr_pos(x, 5))
                bot.send_message(body['message']['chat']['id'], "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!‚úçÔ∏è")
        elif pool.retry_operation_sync(get_pos) == '9':
            if 'text' in body['message']:
                pool.retry_operation_sync(lambda x: edit_comm(x, body['message']['chat']['id'], body['message']['text']))
                pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))
        elif pool.retry_operation_sync(get_pos) == '10':
            if 'text' in body['message']:
                pool.retry_operation_sync(lambda x: add_nick(x, body['message']['chat']['id'], body['message']['text']))
                pool.retry_operation_sync(lambda x: change_curr_pos(x, 0))
                bot.send_message(body['message']['chat']['id'], "‚úÖ–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ‚úÖ")

    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json'
        },
        'body': json.dumps({
            'method': 'sendMessage',
        }),
        'isBase64Encoded': False
    }



def add_nick(session, id, nick):
    session.transaction().execute(
        f'''
        UPDATE stats_pols SET nickname = "{nick.encode("utf-8").hex()}" WHERE TGid = "{id}"
        ''',
        commit_tx=True,
        settings=ydb.BaseRequestSettings().with_timeout(3).with_operation_timeout(2))

def get_sorts(session, cat, lon, lat):
    if cat == '0':
        return session.transaction().execute(
        f'''
        SELECT * from all_recs ORDER BY (lon - {lon})  * (lon - {lon}) + (lat - {lat}) * (lat - {lat}) LIMIT 3
        ''')[0].rows
    else:
        return session.transaction().execute(
        f'''
        SELECT * from all_recs WHERE cats LIKE "%={cat}=%" ORDER BY (lon - {lon})  * (lon - {lon}) + (lat - {lat}) * (lat - {lat}) LIMIT 3
        ''')[0].rows

def finder(body, is_text = False, coords=None):
    global cat, loc
    pool.retry_operation_sync(get_cat)


    bot.send_message(body['message']['chat']['id'], f'''üîé–ü–æ–∏—Å–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.üîç 
–í—ã–±—Ä–∞–Ω—ã–π —Ç–∏–ø –æ—Ç—Ö–æ–¥–æ–≤: {catsss[int(cat)]}''')
    if not is_text:
        lon, lat = body['message']['location']['longitude'], body['message']['location']['latitude']
    else:
        lon, lat = coords

    result = pool.retry_operation_sync(lambda x: get_sorts(x, cat, lon, lat))
    pool.retry_operation_sync(lambda x: add_stat(x, body['message']['chat']['id'], result))
    for i in result:
        tipe = []
        for j in i['cats'].split('='):
            if j != '':
                tipe.append(catsss[int(j)])

        bot.send_message(body['message']['chat']['id'], f'''–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–µ–º–∞: {binascii.unhexlify(i['name']).decode()}

–¢–∏–ø –ø—É–Ω–∫—Ç–∞ —Å–±–æ—Ä–∞: *{', '.join(sorted(tipe))}*
        ''', parse_mode='Markdown')
        locate = f"{i['lat']};{i['lon']}"
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        callback_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µüíñ", callback_data=f"like;{body['message']['chat']['id']};{locate}")
        callback_button1 = types.InlineKeyboardButton(text="–Ø –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∑–¥–µ—Å—å‚ôªÔ∏è", callback_data=f"sort;{body['message']['chat']['id']};{locate}")
        callback_button2 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π‚úçüèª", callback_data=f"comment1;{body['message']['chat']['id']};{locate}")
        callback_button3 = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üìã", callback_data=f"comment2;{body['message']['chat']['id']};{locate}")
        keyboard.add(callback_button, callback_button1, callback_button2, callback_button3)

        bot.send_location(body['message']['chat']['id'], *tuple((float(i['lat']), float(i['lon']))), reply_markup=keyboard)

        loc.append(locate)

    bot.send_message(body['message']['chat']['id'],
                     '''‚úÖ–ü–æ–∏—Å–∫ –æ–∫–æ–Ω—á–µ–Ω.‚úÖ 
–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ Telegram: @AntonIvanov1111''', reply_markup=markup) 
